{"version":3,"sources":["util.js","device.js","main.js","app.js","menu.js","trades.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvptBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"src.js","sourcesContent":["/**\n * Converts the array to a hash map (POJO)\n * @param callback that returns [key,value]\n * @returns {{}}\n */\nArray.prototype.hash = function(callback)\n{\n    var out = {};\n    this.forEach(function(item,i) {\n        var arr = callback(item,i);\n        if (arr) {\n            out[arr[0]] = arr[1];\n        }\n    });\n    return out;\n};\n\n// Polyfill for lame-ass IE\nif (!Array.prototype.find) {\n    Array.prototype.find = function(predicate) {\n        if (this === null) {\n            throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n\n        for (var i = 0; i < length; i++) {\n            value = list[i];\n            if (predicate.call(thisArg, value, i, list)) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n}","(function () {\n\n    /**\n     * The Device model.\n     * @type Backbone.Model\n     */\n    var Device = Backbone.Model.extend({\n\n        defaults: {\n            brand: \"Apple\"\n        },\n\n        /**\n         * Returns the computed name for the device.\n         * @returns {string}\n         */\n        getName: function()\n        {\n            return [\n                this.get('brand'),\n                this.get('name'),\n                this.get('capacity')+\"GB\",\n                this.get('color')]\n                .join(\" \");\n        }\n    });\n\n\n    /**\n     * The Device collection class.\n     * @type Backbone.Collection\n     */\n    var DeviceCollection = Backbone.Collection.extend({\n        model: Device,\n\n        byModel: function()\n        {\n            var out = {};\n            this.each(function(item) {\n                if (! out[item.get('model')]) out[item.get('model')] = [];\n\n                out[item.get('model')].push(item);\n            });\n\n            return out;\n        },\n\n        /**\n         * Returns all devices that have the same model name.\n         * @param name string\n         * @returns {Backbone.Collection}\n         */\n        getModel: function(name)\n        {\n            return new DeviceCollection(this.where({model: name}));\n        },\n\n        /**\n         * Returns all unique models.\n         * @returns {DeviceCollection}\n         */\n        getModels: function()\n        {\n            return this.unique('model');\n        },\n\n        /**\n         * Returns all unique capacities in the collection.\n         * @returns {Array}\n         */\n        getCapacities: function()\n        {\n            return this.unique('capacity').map(function(item) {\n                return item.get('capacity');\n            });\n        },\n\n        /**\n         * Return all unique colors in the collection.\n         * @returns {DeviceCollection}\n         */\n        getColors: function()\n        {\n            return this.unique('color');\n        },\n\n        /**\n         * Returns unique values with the given key.\n         * @param key string\n         * @returns {Backbone.Collection}\n         */\n        unique: function(key)\n        {\n            var out = [];\n            var compare = function(device) {\n                return function(item) {\n                    return item[key] === device[key];\n                }\n            };\n\n            this.each(function(item)\n            {\n                var device = item.toJSON();\n                if (! out.find(compare(device))) {\n                    out.push(device);\n                }\n            });\n\n            return new DeviceCollection(out);\n        }\n    });\n\n\n\n    window.Device = Device;\n    window.DeviceCollection = DeviceCollection;\n})();","(function () {\n\n    // Main application.\n    var app = angular.module('app', ['ngAnimate','ngRoute']);\n\n    /**\n     * Attaches a crsf token to all AJAX headers.\n     * @returns void\n     */\n    function setupAjaxHeaders()\n    {\n        var csrf = $('meta[name=\"csrf_token\"]').attr('content');\n\n        $.ajaxSetup({\n            headers: {\n                'X-CSRF-TOKEN': csrf\n            }\n        });\n\n        app.factory('httpRequestInterceptor', function(){\n            return {request: function(config) {\n                config.headers['X-CSRF-TOKEN'] = csrf;\n                return config;\n            }}\n        });\n        app.config(function($httpProvider) {\n            $httpProvider.interceptors.push('httpRequestInterceptor');\n        });\n    }\n\n    app.config(['$routeProvider','$locationProvider', function($route,$location) {\n        $route.when('/t/:tradeId', {\n            templateUrl: '/ng/trade.html',\n            controller: 'TradeController',\n            controllerAs: 'trade'\n        })\n    }]);\n\n    window.app = app;\n\n    setupAjaxHeaders();\n\n})();\n\n\n\n","(function () {\n\n    var menuOffsetAt = 960;\n    var menuOffset = 80;\n\n    /**\n     * The master lookup collection of devices.\n     * @type DeviceCollection\n     */\n    var lookup = new DeviceCollection();\n\n\n    /**\n     * Steps available for this app. Can be expanded if needed!\n     * The names correspond to a property on the Device model.\n     * @type {string[]}\n     */\n    var steps = ['model','capacity','color'];\n\n    /**\n     * Questions to get values for.\n     * @type {string[]}\n     */\n    var fields = ['q1','q2','q3','q4','q5','carrier'];\n\n    app.controller('AppController', ['$http','$scope', AppController]);\n\n    app.controller('FormController', ['$http','$scope', FormController]);\n\n    /**\n     * Controls the\n     * @param $http\n     * @param $scope\n     * @constructor\n     */\n    function FormController($http,$scope)\n    {\n        $scope.response = null;\n\n        // Initial setup.\n        fields.forEach(function(field)\n        {\n            $scope[field] = null;\n        });\n\n        /**\n         * Submit the form, if valid.\n         * @returns void\n         */\n        $scope.submit = function()\n        {\n            if ($scope.inspectionForm.$valid) {\n                $http.post('/evaluate', getPayload()).success(function(response) {\n                    scrollTo('valueSection');\n                    $scope.response = response;\n                });\n            }\n        };\n\n        /**\n         * Return a JSON object containing the POST payload.\n         * @returns {{}}\n         */\n        function getPayload()\n        {\n            var out = fields.hash(function(field) {\n                var str = $scope[field];\n                var val = str == \"1\" || str == \"0\" ? str === \"1\" : str; // convert to boolean.\n                return [field, val];\n            });\n            out.device = $scope.$parent.selected.toJSON();\n            return out;\n        }\n\n    }\n\n    /**\n     * The Application Controller instance.\n     * @param $http\n     * @param $scope\n     * @constructor\n     */\n    function AppController($http,$scope)\n    {\n        $scope.isLoading = true;\n\n        /**\n         * Variable for the model search input.\n         * @type {string}\n         */\n        $scope.modelSearchField = \"\";\n\n        /**\n         * If no model is found when searching, changes to true.\n         * @type {boolean}\n         */\n        $scope.modelSearchError = false;\n\n        /**\n         * The selected device, when all is said and done.\n         * @type {Device|null}\n         */\n        $scope.selected = null;\n\n        /**\n         * Search for a model in the lookup array.\n         * @returns boolean\n         */\n        $scope.modelSearch = function()\n        {\n            var value = $scope.modelSearchField.toUpperCase();\n\n            for(var i=0; i<lookup.length; i++)\n            {\n                var device = lookup.models[i];\n                if (device.get('models').indexOf(value) > -1) {\n                    $scope.select_model(device);\n                    return $scope.modelSearchError = false;\n                }\n            }\n            return $scope.modelSearchError = value.length > 1;\n        };\n\n        /**\n         * Set up for each step.\n         * If choosing a previous step, will clear selections for future steps.\n         * Picks out the array of objects for the next step.\n         */\n        steps.forEach(function(step,i)\n        {\n            var prev = steps[i-1] ? steps[i-1] : null;\n            var next = steps[i+1] ? steps[i+1] : null;\n\n            $scope[step] = null;\n            $scope[\"options_\"+step] = [];\n            $scope[\"select_\"+step] = function(object)\n            {\n                for (n=i+1; n<steps.length; n++) {\n                    $scope[steps[n]] = null;\n                    $scope[\"options_\"+steps[n]] = [];\n                }\n                $scope[step] = object.id;\n                if (next) {\n                    $scope[\"options_\"+next] = getNext(i);\n                }\n\n                $scope.selected = getSelected();\n\n                scrollTo(next ? next+\"Section\" : 'reviewSection');\n            }\n        });\n\n        /**\n         * The currently selected device id's.\n         * @returns object\n         */\n        $scope.selections = function()\n        {\n            return steps.hash(function(step,i) {\n                return [step, $scope[step]];\n            })\n        };\n\n        /**\n         * Move to the next area.\n         * @param id string\n         * @returns void\n         */\n        $scope.nextQuestion = function(id)\n        {\n            scrollTo(id, 768);\n        };\n\n        /**\n         * Return the next group of devices (unique attributes).\n         * @param n int\n         * @returns {Array}\n         */\n        function getNext(n)\n        {\n            var nextKey = steps[n+1];\n            if (n === null || ! nextKey) return null;\n\n            var search = {};\n            while(n >= 0) {\n                var key = steps[n];\n                search[key] = lookup.get($scope[key]).get(key);\n                n --;\n            }\n            return new DeviceCollection (lookup.where(search)).unique(nextKey).toJSON();\n        }\n\n        /**\n         * Return the selected Device model if all selections have been made.\n         * @returns {Device|null}\n         */\n        function getSelected()\n        {\n            var last = $scope[steps[steps.length-1]];\n            if (! last) {\n                return null;\n            }\n\n            return lookup.get(last);\n        }\n\n\n        // Do the deed.\n        $http.get('/devices', null).success(function(data){\n\n            lookup.reset(data);\n            $scope[\"options_\"+steps[0]] = lookup.unique(steps[0]).toJSON();\n            $scope.isLoading = false;\n\n        }.bind(this));\n    }\n\n\n    /**\n     * Scroll to the next section.\n     * @param id string\n     * @param minWidth Number\n     * @returns void\n     */\n    function scrollTo(id,minWidth)\n    {\n        var isMin = menuOffsetAt > window.innerWidth;\n        if (minWidth && minWidth < window.innerWidth) {\n            return;\n        }\n        $('html,body').animate({\n            scrollTop: $(\"#\"+id).offset().top - (isMin ? menuOffset : 0)\n        },1000,'easeInOutExpo');\n        //TweenLite.to(window, 2, {scrollTo:{y:}, ease:Power2.easeOut});\n    }\n\n})();","(function (app) {\n\n    app.controller(\"MenuController\", ['$scope', MenuController]);\n\n    function MenuController($scope)\n    {\n        $scope.isOpen = false;\n\n        this.toggle = function(bool)\n        {\n            if (! arguments.length) {\n                return $scope.isOpen = ! $scope.isOpen;\n            }\n            return $scope.isOpen = bool;\n        };\n\n        this.open = function()\n        {\n            $scope.isOpen = true;\n        }\n    }\n\n})(window.app);","(function (app)\n{\n\n    app.controller('TradeListController', ['$scope','$http', TradeListController]);\n    app.controller('TradeController',     ['$scope','$http','$location', TradeController]);\n\n    function TradeListController($scope,$http)\n    {\n        var self = this;\n\n        $scope.processing = true;\n\n        this.trades = [];\n\n\n        /**\n         * Get all trades from the server.\n         * @returns void\n         */\n        this.getTrades = function()\n        {\n            $scope.processing = true;\n            $http.get('/data/trades').success(function(data) {\n                $scope.processing = false;\n                self.trades = data;\n            });\n        };\n\n\n\n        // Init\n        this.getTrades();\n    }\n\n\n\n    function TradeController($scope,$http,$location)\n    {\n        $scope.go = function(path)\n        {\n            $location.path(path);\n        }\n    }\n\n\n})(window.app);"],"sourceRoot":"/source/"}